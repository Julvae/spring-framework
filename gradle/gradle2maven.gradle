//Spring转Maven项目插件，只要在build.gradle脚本最后加上：目前只针对3.2.x版本有效，其他版本没有测试
//apply plugin: 'maven-publish'
//apply from: "${gradleScriptDir}/gradle2maven.gradle"

def publishMavenProjects() {
    return subprojects.findAll {
        it.name != 'spring-build-src' &&
                it.name != 'spring-orm-hibernate4' &&
                it.name != 'spring-webmvc-tiles3' &&
                it.name != 'spring-test-mvc' &&
                it.name != 'spring-test' &&
                it.name != 'spring-aspects'
    }
}

configure(publishMavenProjects()){subproject ->
    apply plugin: "java"
    apply plugin: "maven"

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "http://artifactory.intra.xiaojukeji.com:80/artifactory/libs-snapshot") {
                    authentication(userName: "liaoyoujin", password: "AKCp5ZmHJrQP7ViDm6hEvvDPAtGN4cGP1k29mny9jGV9pis5cbxLaciNPKkxiDgNqXnK9CuYy")
                }
                pom.groupId == subproject.group
                pom.artifactId == subproject.name
                pom.version == subproject.version
            }
        }
    }

    task writeNewPom {
        doLast {
            pom {
                project {
                    inceptionYear '2008'
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                }
                withXml {
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'optional' && project.configurations.compile.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each {
                        //println(it.groupId)
                        it.scope*.value = 'compile'
                    }
                }
            }.writeTo("${subproject.projectDir}/pom.xml")
        }
    }

//    task copyLocalJar(type: Copy, dependsOn: jar){
//        from("${subproject.buildDir}/libs/")
//        include '**/spring-asm*.jar','**/spring-cglib*.jar'
//        into file("src/main/resources/lib/")
//        includeEmptyDirs = true
//    }
//    copyLocalJar.onlyIf {subproject.name == "spring-core"}


    task copyLocalDependencies(dependsOn: jar) {
        doLast {
            Map<String,String> map = new HashMap<String, String>()
            configurations.all.each { configuration ->
                //println("configuration.files${configuration}")
                configuration.files { it instanceof FileCollectionDependency }.collect { it }.each { file ->
                    def fileName = "${file.name}"
                    println("configuration.files.${fileName}")
                    if(!map.containsKey(fileName)){
                        map.put(fileName, "1")
                        def folder = new File("${subproject.buildDir}/libs/${fileName}")
                        if(folder.exists()) {
//                            ant.move file: "${subproject.buildDir}/libs/${fileName}",
//                                    todir: "${subproject.projectDir}/src/main/resources/lib/"
                            copy {
                                from "${subproject.buildDir}/libs/"
                                into "${subproject.projectDir}/src/main/resources/lib/"
                                include "${fileName}"
                            }
                        }
                    }
                }
            }
        }
    }

    task doDependencies(dependsOn: [writeNewPom, copyLocalDependencies]) {
        println("call doDependencies")
        if(subproject.name == "spring-core"){
            dependsOn cglibRepackJar
        }
        doLast {
            Map<String,Boolean> pj = new HashMap<String, Boolean>()
            publishMavenProjects().each { p ->
                pj.put(p.name, true)
            }
            def xmlRoot = new XmlParser().parse(file("${subproject.projectDir}/pom.xml"))
            def depRoot = xmlRoot.dependencies
            def depRootFirst = depRoot.first()
            depRootFirst.dependency.each{dep ->
                depRootFirst.remove(dep)
            }
            Map<String,String> map = new HashMap<String, String>()
            println("call doDependencies configurations")
            configurations.all.each { configuration ->
                configuration.resolvedConfiguration.resolvedArtifacts.each { artifact ->
                    def elem = artifact.moduleVersion.id
                    println("configuration.artifact.${artifact},${configuration.name}")
                    def key = "${elem.name}"
                    if(!map.containsKey(key) && configuration.name != "merging" &&
                            !configuration.name.contains("-") && !configuration.name.contains("Merge")){
                        def dr = depRootFirst.appendNode("dependency")
                        dr.appendNode("groupId","${elem.group}")
                        dr.appendNode("artifactId","${elem.name}")
                        if(pj.containsKey(elem.name)){
                            dr.appendNode("version","${subproject.version}")
                        }
                        if(!pj.containsKey(elem.name)){
                            dr.appendNode("version","${elem.version}")
                        }
                        map.put(key, "1")
                    }
                }
                println("configuration.files")
                configuration.files { it instanceof FileCollectionDependency }.collect { it }.each { file ->
                    def fileName = "${file.name}"
                    def arr = fileName.split("-")
                    def sub = arr[0..arr.size()-2]
                    String name = sub.join("-")
                    def version = arr[arr.size()-1].replace(".jar","")
                    def folder = new File("${subproject.buildDir}/libs/${fileName}")
                    if(!map.containsKey(fileName) && folder.exists()){
                        def dr = depRootFirst.appendNode("dependency")
                        dr.appendNode("groupId","${subproject.group}")
                        dr.appendNode("artifactId","${name}")
                        dr.appendNode("version","${version}")
                        dr.appendNode("scope","system")
                        dr.appendNode("systemPath","${subproject.projectDir}/src/main/resources/lib/"+fileName)
                        map.put(fileName, "1")
                    }

                }
            }
            def printer = new XmlNodePrinter(new PrintWriter(new FileWriter("${subproject.projectDir}/pom.xml")))
            printer.preserveWhitespace = true
            printer.print(xmlRoot)
        }
    }

    task fixDependencies(dependsOn: [doDependencies]){
        doLast{
            if(subproject.name == "spring-orm"){
                def xmlRoot = new XmlParser().parse(file("${subproject.projectDir}/pom.xml"))
                xmlRoot.dependencies.first().'*'.findAll {
                    it.artifactId.text() == "geronimo-jms_1.1_spec"
                }.each { dp ->
                    dp.version*.value = "1.1"
                }
                xmlRoot.dependencies.first().'*'.findAll {
                    it.artifactId.text() == "openjpa"
                }.each { dp ->
                    def exclusions = dp.appendNode("exclusions")
                    def exclusion = exclusions.appendNode("exclusion")
                    exclusion.appendNode("groupId", "org.apache.geronimo.specs")
                    exclusion.appendNode("artifactId", "geronimo-jms_1.1_spec")
                }
                def printer = new XmlNodePrinter(new PrintWriter(new FileWriter("${subproject.projectDir}/pom.xml")))
                printer.preserveWhitespace = true
                printer.print(xmlRoot)
            }
        }
    }

    install.dependsOn(fixDependencies)

    task cleanDependencies(type: Delete){
        delete fileTree("${subproject.projectDir}") {
            include 'pom.xml','pom-default.xml'
        }
        delete "${subproject.projectDir}/src/main/resources"
        outputs.upToDateWhen {false}
    }
    clean.dependsOn(cleanDependencies)
}


configure(rootProject){
    apply plugin: "java"
    apply plugin: "maven"

    task writeNewPom {
        doLast {
            pom {
                project {
                    packaging 'pom'
                    inceptionYear '2008'
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    modules {
                        publishMavenProjects().each {p ->
                            module p.name
                        }
                    }
                }
                withXml {
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'optional' && project.configurations.compile.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each {
                        //println(it.groupId)
                        it.scope*.value = 'compile'
                    }
                }
            }.writeTo("${rootProject.projectDir}/pom.xml")
        }
    }
    install.dependsOn(writeNewPom)
}
